import os
from typing import Dict


class BaseSettings:
    APP_NAME = os.getenv("GIGES_APP_NAME", "giges")
    APP_VERSION = os.getenv("APP_VERSION", "latest")

    ENVIRONMENT = ""
    SERVER_BASE_URI = ""
    DEBUG = os.getenv("GIGES_DEBUG", "0") == "1"

    # Database
    SQLALCHEMY_DATABASE_URI = os.getenv("GIGES_DATABASE_URI")
    SQLALCHEMY_TRACK_MODIFICATIONS = False

    # Integrations
    SENTRY_URI = ""
    ASANA_TOKEN = os.environ.get("ASANA_TOKEN", "")
    ASANA_WORKSPACE = "1199978051314275"


class ProductionSettings(BaseSettings):
    ENVIRONMENT = "production"

    SERVER_BASE_URI = "https://integrations.tesselo.com"
    SENTRY_URI = "https://ec9a91e1ce0e40f59388c665c092dc2a@o640190.ingest.sentry.io/5911249"  # noqa: E501


class StagingSettings(BaseSettings):
    ENVIRONMENT = "staging"

    ASANA_WORKSPACE = "1199978051314275"
    SERVER_BASE_URI = "https://integrations-staging.tesselo.com"


class DevelopmentSettings(BaseSettings):
    ENVIRONMENT = "development"
    DEBUG = True
    SERVER_BASE_URI = "http://localhost:8080"
    SQLALCHEMY_DATABASE_URI = os.getenv("GIGES_DATABASE_URI") or (
        "postgresql://postgres@localhost:5432/giges_dev"
    )


class TestingSettings(BaseSettings):
    ENVIRONMENT = "testing"
    SERVER_BASE_URI = "http://localhost:8080"
    ASANA_TOKEN = "FAKETOKEN"
    SQLALCHEMY_DATABASE_URI = os.getenv("GIGES_DATABASE_URI") or (
        "postgresql://postgres@localhost:5432/giges_test"
    )


# Dictionary generated by the CLI command
# $ giges asana generate-custom-field-dicts PROJECT_ID
#
# Manually merged and added the 'column' fields

asana_fields: Dict[str, Dict] = {
    "1200760323623705": {
        "name": "Class of Service",
        "column": "class_of_service",
        "options": {
            "1200760323624685": "For Yesterday",
            "1200760323624695": "Timebomb",
            "1200760323630880": "Tessera",
            "1200760323631982": "Philosophical",
        },
    },
    "1200200605652836": {
        "name": "Task Progress",
        "column": "task_progress",
        "options": {
            "1200200605652837": "Not Started",
            "1200200605652838": "In Progress",
            "1200200605652839": "Waiting",
            "1200200605652840": "Deferred",
            "1200200605652841": "Done",
        },
    },
    "1200765868551790": {
        "name": "Item category PTF",
        "column": "item_category",
        "options": {
            "1200765868552817": "Fix",
            "1200765868553783": "Improvement",
            "1200765868553786": "Feature",
            "1200765868554820": "Design",
        },
    },
    "1200760343663992": {
        "name": "Item Category DS",
        "column": "item_category",
        "options": {
            "1200760343663993": "Land use maps",
            "1200760343663994": "Tree volume",
            "1200760343663995": "Vegetation status",
            "1200760343663996": "Vegetation age",
            "1200800613780258": "Vegetation growth",
            "1200800483480468": "Vegetation height",
            "1200835962877838": "No-go zones",
        },
    },
    "1200773673473261": {
        "name": "Related Service",
        "column": "related_service",
        "options": {
            "1200773673473262": "P1",
            "1200773673473263": "P2",
            "1200773673473264": "Giges",
            "1200773673473265": "Frontend-app",
            "1200773673473266": "Catalog",
            "1200802314753499": "All python",
            "1200802314753500": "All JS",
            "1200802315310834": "All",
        },
    },
}
